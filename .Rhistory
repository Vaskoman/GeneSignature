sign72 <- read.delim (file = "/home/vassil/Documents/Compounds/signature72metast.txt",
header = FALSE, stringsAsFactors = FALSE)
head(sign72)
dim(sign72)
sign72 <- sign72[,1]
class(sign72)
head(sign72)
colnames(all)
all72sign <- all[all$HGNC.symbol %in% sign72,]
dim(all72sign)
head(all72sign)
?write.table
write.table (all72sign,
file = "/home/vassil/Documents/Compounds/all72metastSign.txt",
sep = "\t", col.names = TRUE)
write.table (all72sign,
file = "/home/vassil/Documents/Compounds/all72metastSign.txt",
sep = "\t", col.names = TRUE, row.names = FALSE)
q()
install.packages('GOplot')
library(GOplot)
data(EC)
head(EC$david)
head(EC$genelist)
circ <- circle_dat(EC$david, EC$genelist)
class(circ)
head(circ)
tail(circ)
chord <- chord_dat (circ, EC$genes, EC$process)
GOChord (chord, space = 0.02, gene.order = 'logFC',
gene.space = 0.25, gene.size = 5)
?GOChord
# Numbero of isoforms
isoforms <- readline(prompt="Enter number of isoforms: ")
totL <- as.integer(readline(prompt="Total length of largest isoform: "))
CDSStart <- as.integer(readline(prompt="Enter CDS start: "))
CDSEnd <- as.integer(readline(prompt="Enter CDS end: "))
exons <- integer()
repeat {
xn <- as.integer(readline(prompt="Enter EXON ending position or '0' to exit: "))
if (xn != 0) {
exons <- c(exons, xn)
} else {break}
}
isoforms <- as.integer(isoforms)
isosS <- rep(list(integer()),isoforms)
isosE <- rep(list(integer()),isoforms)
isosS[[1]] <- 1L
isosE[[1]] <- totL
# Isoform start and stop
for (i in 2:length(isosS)) {
z <- 1L
y <- 1L
print(paste("Isoform ", i, ": ......."))
print("START:")
repeat {
z <- as.integer(readline(prompt="Enter START position of isoform or '0' to exit: "))
if (z!=0) {
isosS[[i]] <- c(isosS[[i]], z)
#print(isosS)
} else {break}
}
rm(z)
print("END:")
repeat {
y <- as.integer(readline(prompt="Enter END position of isoform or '0' to exit: "))
if (y!=0) {
isosE[[i]] <- c(isosE[[i]], y)
} else {break}
}
rm(y)
}
## Output ####
# Exclusion regions:
ex <- integer()
exL <- integer()
ex <- 1L
exL <- CDSStart
ex <- c(ex, CDSEnd)
exL <- c(exL, totL-CDSEnd)
for (i in 2:length(isosS)) {
isoS <- isosS[[i]]
print(isoS)
isoE <- isosE[[i]]
print(isoE)
ord <- order(isoS)
isoS <- isoS[ord]
print(isoS)
isoE <- isoE[ord]
print(isoE)
if (length(isoS)==1) {
ex <- c(ex, 1L, isoE)
exL <- c(exL, isoS, totL-isoE)
} else {
for (j in 1:length(isoS)) {
if (isoS[j]==min(isoS)) { # first splice
ex <- c(ex, 1L)
exL <- c(exL, isoS[j])
} else if (isoS[j] == max(isoS)){ # last splice
ex <- c(ex, isoE[j])
exL <- c(exL, totL - isoE[j])
} else { # middle splices
if (isoE[j] + 1 == isoS[j+1]) { # splices are adjacent
if (isoS[j+1] == max(isoS)){ # adjacent splice is last
ex <- c(ex, isoE[j+1])
exL <- c(exL, totL - isoE[j+1])
} else { # adjacent splice is not last
ex <- c(ex, isoE[j+1])
exL <- c(exL, isoS[j+2] - isoE[j+1])
}
} else { # splices are note adjacent and are the middle splices
ex <- c(ex, isoE[j])
exL <- c(exL, isoS[j+1] - isoE[j])
}
} # IfElse END
} # vector loop for single isoform END
}
}
# Integrate exclusion regions:
exF <- integer()
exFL <- integer()
olap <- as.integer(names(table(ex)[table(ex)>1]))
for (i in ex) {
if (i %in% olap) {
a <- ex [ex %in% i]
aL <- exL [ex %in% i]
a1L <- max(aL)
a1 <- a[1]
} else {
a1 <- i
a1L <- exL[ex==a1]
}
if (i < totL) {
exF <- c(exF, a1)
exFL <- c(exFL, a1L)
}
}
keep <- !duplicated(exF)
exF <- exF[keep]
exFL <- exFL[keep]
# Print exclusion regions:
excl <- paste(exF, exFL, sep = ",")
excl <- paste(excl, collapse = " ")
cat("Exclusion regions are: \n\n", excl, "\n\n\n\n")
intervalsL <- integer()
intervalsR <- integer()
for (i in 1:length(exF)) {
if (exF[i]==max(exF)) {
break
}
intervalsL <- c(intervalsL, exFL[i] + exF[i])
intervalsR <- c(intervalsR, exF[i+1])
}
intervals <- as.matrix(cbind(intervalsL, intervalsR))
targets <- integer()
for (i in exons) {
#print(i)
for (j in 1:dim(intervals)[1]) {
#print(j)
if (i < intervals[,2] & i> intervals[,1]) {
targets <- c(targets, i)
}
}
}
# Output targets
targetO <- paste(targets, "2", sep = ",")
targetO <- paste(targetO, collapse = " ")
cat("Target regions are: \n\n", targetO, "\n\n\n\n")
rm(list=ls())
# Numbero of isoforms
isoforms <- readline(prompt="Enter number of isoforms: ")
totL <- as.integer(readline(prompt="Total length of largest isoform: "))
CDSStart <- as.integer(readline(prompt="Enter CDS start: "))
CDSEnd <- as.integer(readline(prompt="Enter CDS end: "))
isosS <- rep(list(integer()),isoforms)
isosE <- rep(list(integer()),isoforms)
isosS[[1]] <- 1L
isosE[[1]] <- totL
# Isoform start and stop
for (i in 2:length(isosS)) {
z <- 1L
y <- 1L
print(paste("Isoform ", i, ": ......."))
print("START:")
repeat {
z <- as.integer(readline(prompt="Enter START position of isoform or '0' to exit: "))
if (z!=0) {
isosS[[i]] <- c(isosS[[i]], z)
#print(isosS)
} else {break}
}
rm(z)
print("END:")
repeat {
y <- as.integer(readline(prompt="Enter END position of isoform or '0' to exit: "))
if (y!=0) {
isosE[[i]] <- c(isosE[[i]], y)
} else {break}
}
rm(y)
}
exons <- integer()
repeat {
xn <- as.integer(readline(prompt="Enter EXON ending position or '0' to exit: "))
if (xn != 0) {
exons <- c(exons, xn)
} else {break}
}
isoforms <- as.integer(isoforms)
isosS
isosS <- rep(list(integer()),isoforms)
isosE <- rep(list(integer()),isoforms)
isosS[[1]] <- 1L
isosE[[1]] <- totL
# Isoform start and stop
for (i in 2:length(isosS)) {
z <- 1L
y <- 1L
print(paste("Isoform ", i, ": ......."))
print("START:")
repeat {
z <- as.integer(readline(prompt="Enter START position of isoform or '0' to exit: "))
if (z!=0) {
isosS[[i]] <- c(isosS[[i]], z)
#print(isosS)
} else {break}
}
rm(z)
print("END:")
repeat {
y <- as.integer(readline(prompt="Enter END position of isoform or '0' to exit: "))
if (y!=0) {
isosE[[i]] <- c(isosE[[i]], y)
} else {break}
}
rm(y)
}
## Output ####
# Exclusion regions:
ex <- integer()
exL <- integer()
ex <- 1L
exL <- CDSStart
ex <- c(ex, CDSEnd)
exL <- c(exL, totL-CDSEnd)
for (i in 2:length(isosS)) {
isoS <- isosS[[i]]
print(isoS)
isoE <- isosE[[i]]
print(isoE)
ord <- order(isoS)
isoS <- isoS[ord]
print(isoS)
isoE <- isoE[ord]
print(isoE)
if (length(isoS)==1) {
ex <- c(ex, 1L, isoE)
exL <- c(exL, isoS, totL-isoE)
} else {
for (j in 1:length(isoS)) {
if (isoS[j]==min(isoS)) { # first splice
ex <- c(ex, 1L)
exL <- c(exL, isoS[j])
} else if (isoS[j] == max(isoS)){ # last splice
ex <- c(ex, isoE[j])
exL <- c(exL, totL - isoE[j])
} else { # middle splices
if (isoE[j] + 1 == isoS[j+1]) { # splices are adjacent
if (isoS[j+1] == max(isoS)){ # adjacent splice is last
ex <- c(ex, isoE[j+1])
exL <- c(exL, totL - isoE[j+1])
} else { # adjacent splice is not last
ex <- c(ex, isoE[j+1])
exL <- c(exL, isoS[j+2] - isoE[j+1])
}
} else { # splices are note adjacent and are the middle splices
ex <- c(ex, isoE[j])
exL <- c(exL, isoS[j+1] - isoE[j])
}
} # IfElse END
} # vector loop for single isoform END
}
}
# Integrate exclusion regions:
exF <- integer()
exFL <- integer()
olap <- as.integer(names(table(ex)[table(ex)>1]))
for (i in ex) {
if (i %in% olap) {
a <- ex [ex %in% i]
aL <- exL [ex %in% i]
a1L <- max(aL)
a1 <- a[1]
} else {
a1 <- i
a1L <- exL[ex==a1]
}
if (i < totL) {
exF <- c(exF, a1)
exFL <- c(exFL, a1L)
}
}
keep <- !duplicated(exF)
exF <- exF[keep]
exFL <- exFL[keep]
# Print exclusion regions:
excl <- paste(exF, exFL, sep = ",")
excl <- paste(excl, collapse = " ")
cat("Exclusion regions are: \n\n", excl, "\n\n\n\n")
intervalsL <- integer()
intervalsR <- integer()
for (i in 1:length(exF)) {
if (exF[i]==max(exF)) {
break
}
intervalsL <- c(intervalsL, exFL[i] + exF[i])
intervalsR <- c(intervalsR, exF[i+1])
}
intervals <- as.matrix(cbind(intervalsL, intervalsR))
targets <- integer()
for (i in exons) {
#print(i)
for (j in 1:dim(intervals)[1]) {
#print(j)
if (i < intervals[,2] & i> intervals[,1]) {
targets <- c(targets, i)
}
}
}
# Output targets
targetO <- paste(targets, "2", sep = ",")
targetO <- paste(targetO, collapse = " ")
cat("Target regions are: \n\n", targetO, "\n\n\n\n")
## setwd, load libraries, & load data ####
setwd("/home/vassil/Documents/A.Martineau/GeneSignature")
load("//home/vassil/Documents/A.Martineau/GeneSignature/masterTableDown")
load("/home/vassil/Documents/A.Martineau/GeneSignature/masterTableUp")
load("//home/vassil/Documents/A.Martineau/GeneSignature/tabDown.u")
load("/home/vassil/Documents/A.Martineau/GeneSignature/tabUp.u")
names(tabDown.u)
table(tabDown.u$cellType)
## PBMCs ####
tab.up.pbmc <-tabUp.u[tabUp.u$cellType == 'pbmc',]
tab.down.pbmc <- tabDown.u[tabDown.u$cellType == 'pbmc',]
table(tab.up.pbmc$Gene.ID)
table(tab.up.pbmc$dataset)
table(tab.up.pbmc$dataset)[table(tab.up.pbmc$dataset)>=4]
table(tab.up.pbmc$Gene.ID)[table(tab.up.pbmc$Gene.ID)>=4]
length(table(tab.up.pbmc$Gene.ID)[table(tab.up.pbmc$Gene.ID)>=4])
names(table(tab.up.pbmc$Gene.ID)[table(tab.up.pbmc$Gene.ID)>=4])
pbmc.up <- names(table(tab.up.pbmc$Gene.ID)[table(tab.up.pbmc$Gene.ID)>=4])
pbmc.sign.up <- tab.up.pbmc[tab.up.pbmc$Gene.ID %in% pbmc.up,]
pbmc.sign.up
pbmc.sign.up[order(pbmc.sign.up$Gene.Name),]
# Get the DOWN genes that appear in a large number of datasets:
pbmc.down <- names(table(tab.down.pbmc$Gene.ID)[table(tab.down.pbmc$Gene.ID)>=4])
pbmc.down
pbmc.sign.down <- tab.down.pbmc[tab.down.pbmc$Gene.ID %in% pbmc.down,]
pbmc.sign.down[order(pbmc.sign.down$Gene.Name),]
table(tab.up.pbmc$Gene.Name)[table(tab.up.pbmc$Gene.Name)>=5]
length(table(tab.up.pbmc$Gene.Name)[table(tab.up.pbmc$Gene.Name)>=5])
length(table(tab.down.pbmc$Gene.Name)[table(tab.down.pbmc$Gene.Name)>=5])
# combine in one table (signature)
pbmc.sign.4.6 <- rbind(pbmc.sign.up, pbmc.sign.down)
# clean up
rm(list=c("pbmc.up","pbmc.down","pbmc.sign.up","pbmc.sign.down"))
# Get the UP genes that appear in 5/6 datasets:
pbmc.up <- names(table(tab.up.pbmc$Gene.ID)[table(tab.up.pbmc$Gene.ID)>=5])
pbmc.sign.up <- tab.up.pbmc[tab.up.pbmc$Gene.ID %in% pbmc.up,]
# Get the DOWN genes that appear in 5/6 datasets:
pbmc.down <- names(table(tab.down.pbmc$Gene.ID)[table(tab.down.pbmc$Gene.ID)>=5])
pbmc.sign.down <- tab.down.pbmc[tab.down.pbmc$Gene.ID %in% pbmc.down,]
# combine in one table (signature)
pbmc.sign.5.6 <- rbind(pbmc.sign.up, pbmc.sign.down)
# clean up
rm(list=c("pbmc.up","pbmc.down","pbmc.sign.up","pbmc.sign.down"))
?write.table
# save as tables:
write.table(pbmc.sign.4.6, file="pbmc.sign.4.6.txt", sep="\t", row.names = F)
write.table(pbmc.sign.5.6, file="pbmc.sign.5.6.txt", sep="\t", row.names = F)
?read.delim
## Datasets metadata ####
# load datasets table:
datasets <- read.delim("Datasets")
olddatasets <- read.delim("olddatasets")
names(datasets)
names(olddatasets)
# merge the 2 datasets tables:
metadata <- merge (datasets, olddatasets, by.x = "Old.name",
by.y = "olddataset", all.x = TRUE)
metadata
metadata[,1:2]
# clean up:
rm(list = c("datasets","olddatasets"))
?write.table
# save table:
write.table(metadata, file = "metadata.txt", sep = "\t",
row.names = F)
pbmc.sign.4.6 <- pbmc.sign.4.6[order(pbmc.sign.4.6$Gene.Name),]
names(metadata)
names(metadata)[2] <- "name"
names(metadata)
# save table:
write.table(metadata, file = "metadata.txt", sep = "\t",
row.names = F)
names(pbmc.sign.4.6)
# add metadata:
pbmc.sign.4.6 <- merge (pbmc.sign.4.6, metadata, by.x = "dataset",
by.y = "name", all.x = T)
names(pbmc.sign.4.6)
pbmc.sign.4.6 <- pbmc.sign.4.6[,-c("Old.name","cancer","primary","organ",
"type.y",)]
pbmc.sign.4.6 <- pbmc.sign.4.6[,-c("Old.name","cancer","primary","organ",
"type.y")]
## exclude columns ####
excol <- c("Old.name","cancer","primary","organ","type.y")
pbmc.sign.4.6 <- pbmc.sign.4.6[,
!(colnames(pbmc.sign.4.6) %in% excol)]
colnames(pbmc.sign.4.6)
pbmc.sign.5.6 <- pbmc.sign.5.6[order(pbmc.sign.5.6$Gene.Name),]
# add metadata:
pbmc.sign.5.6 <- merge (pbmc.sign.5.6, metadata, by.x = "dataset",
by.y = "name", all.x = T)
pbmc.sign.5.6 <- pbmc.sign.5.6[,
!(colnames(pbmc.sign.5.6) %in% excol)]
# save as tables:
write.table(pbmc.sign.4.6, file="pbmc.sign.4.6.txt", sep="\t", row.names = F)
write.table(pbmc.sign.5.6, file="pbmc.sign.5.6.txt", sep="\t", row.names = F)
pbmc.sign.5.6 <- pbmc.sign.5.6[order(pbmc.sign.5.6$Gene.Name),]
write.table(pbmc.sign.5.6, file="pbmc.sign.5.6.txt", sep="\t", row.names = F)
pbmc.sign.4.6 <- pbmc.sign.4.6[order(pbmc.sign.4.6$Gene.Name),]
# save as tables:
write.table(pbmc.sign.4.6, file="pbmc.sign.4.6.txt", sep="\t", row.names = F)
write.table(pbmc.sign.5.6, file="pbmc.sign.5.6.txt", sep="\t", row.names = F)
# clean up:
rm (list = c("tab.down.pbmc", "tab.up.pbmc", "tabUp.u", "tabDown.u",
"pbmc.sign.down", "pbmc.down", "pbmc.sign.up", "pbmc.up",
"pbmc.sign.4.6", "pbmc.sign.5.6"))
## Remove opposite direction genes per cell type in epithelial datasets####
# up:
tabUp.epith <- subset(masterTableUp, masterTableUp$dataset == "epith")
tabDown.epith <- subset(masterTableDown, masterTableDown$dataset == "epith")
## Remove opposite direction genes per cell type in epithelial datasets####
# subset for epithelial only:
tabUp.epith <- subset(masterTableUp, masterTableUp$cellType == "epith")
names(masterTableDown)
table(masterTableUp$dataset)
## Remove opposite direction genes per cell type in epithelial datasets####
# subset for epithelial only excluding pancreatic, liver, and corneal:
epith.data <- c("E.Br.20h.1", "E.Br.24h.1", "E.Br.24h.2", "E.Br.24h.3", "E.Br.24h.4",
"E.Br.30d.1", "E.Br.50h.1", "E.Br.8h.1", "E.HN.24h.1", "E.Lu.24h.1",
"E.Pr.24h.1", "E.Pr.24h.2", "E.Pr.24h.3", "E.Pr.48h.1", "E.Pr.48h.2",
"E.Pr.48h.3", "E.Pr.6h.1")
tabUp.epith <- masterTableUp[masterTableUp$dataset %in% epith.data,]
tabDown.epith <- masterTableDown[masterTableDown$dataset %in% epith.data,]
# obtain uniquely regulated genes:
tabUp <- data.frame(matrix (ncol=length(names(tabUp.epith)), # define holder
nrow = 0)) # dataframe for unique upregulated genes
names(tabUp) <- names(tabUp.epith)
tabUp.epith.u <- tabUp.epith[!(tabUp.epith$Gene.ID %in% tabDown.epith$Gene.ID),]
tabDown.epith.u <- tabDown.epith[!(tabDown.epith.u$Gene.ID %in% tabUp.epith$Gene.ID),]
tabDown.epith.u <- tabDown.epith[!(tabDown.epith$Gene.ID %in% tabUp.epith$Gene.ID),]
View(tabDown.epith)
dim(tabUp.epith)
dim(tabUp.epith.u)
dim(tabDown.epith.u)
dim(tabDown.epith)
rm(tabUp)
max(table(tabUp.epith.u$Gene.ID))
table(tabUp.epith.u$dataset)
length(table(tabUp.epith.u$dataset))
table(tabUp.epith.u$Gene.ID)[table(tabUp.epith.u$Gene.ID)>=14]
table(tabUp.epith.u$Gene.ID)[table(tabUp.epith.u$Gene.ID)>=13]
table(tabUp.epith.u$Gene.ID)[table(tabUp.epith.u$Gene.ID)>=10]
table(tabUp.epith.u$Gene.ID)[table(tabUp.epith.u$Gene.ID)>=8]
table(tabDown.epith.u$Gene.ID)[table(tabDown.epith.u$Gene.ID)>=8]
table(tabDown.epith.u$Gene.ID)[table(tabDown.epith.u$Gene.ID)>=5]
table(tabDown.epith.u$Gene.ID)[table(tabDown.epith.u$Gene.ID)>=4]
# genes
genes.up <- names(table(tabUp.epith.u$Gene.ID)[table(tabUp.epith.u$Gene.ID)>=8])
genes.up
genes.down <- names(table(tabDown.epith.u$Gene.ID)[table(tabDown.epith.u$Gene.ID)>=4])
epith.sig.up <- tabUp.epith.u[tabUp.epith.u$Gene.ID %in% genes.up,]
epith.sig.down <- tabDown.epith.u[tabDown.epith.u$Gene.ID %in% genes.down,]
table(epith.sig.up$dataset)
table(epith.sig.down$dataset)
# combine in one table (signature):
epith.sig <- rbind(epith.sign.up, epith.sign.down)
# combine in one table (signature):
epith.sig <- rbind(epith.sig.up, epith.sig.down)
names(epith.sig)
# add metadata and order:
epith.sig <- merge (epith.sig, metadata, by.x = "dataset",
by.y = "name", all.x = T)
epith.sig <- epith.sig[,!(colnames(epith.sig) %in% excol)]
head(epith.sig)
# order by gene name:
epith.sig <- epith.sig[order(epith.sig$Gene.Name),]
head(epith.sig)
# clean up
rm(list=c("epith.data","tabUp.epith","tabDown.epith","tabUp.epith.u",
"tabDown.epith.u", "genes.down", "genes.up", "epith.sig.down",
"epith.sig.up"))
# save as tables:
write.table(epith.sig, file="epith.sig.txt", sep="\t", row.names = F)
names(epith.sig)
# Get only the 8 genes that also appear in lung:
lung <- epith.sig[
epith.sig$Gene.ID %in% epith.sig$Gene.ID[epith.sig$dataset=="E.Lu.24h.1"],]
lung[,1:3]
table(lung$Gene.ID)
write.table (lung, file = "lung.txt", sep="\t", row.names=F)
