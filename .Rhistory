# Output targets
targetO <- paste(targets, "2", sep = ",")
targetO <- paste(targetO, collapse = " ")
cat("Target regions are: \n\n", targetO, "\n\n\n\n")
rm(list=ls())
# Numbero of isoforms
isoforms <- readline(prompt="Enter number of isoforms: ")
totL <- as.integer(readline(prompt="Total length of largest isoform: "))
CDSStart <- as.integer(readline(prompt="Enter CDS start: "))
CDSEnd <- as.integer(readline(prompt="Enter CDS end: "))
isosS <- rep(list(integer()),isoforms)
isosE <- rep(list(integer()),isoforms)
isosS[[1]] <- 1L
isosE[[1]] <- totL
# Isoform start and stop
for (i in 2:length(isosS)) {
z <- 1L
y <- 1L
print(paste("Isoform ", i, ": ......."))
print("START:")
repeat {
z <- as.integer(readline(prompt="Enter START position of isoform or '0' to exit: "))
if (z!=0) {
isosS[[i]] <- c(isosS[[i]], z)
#print(isosS)
} else {break}
}
rm(z)
print("END:")
repeat {
y <- as.integer(readline(prompt="Enter END position of isoform or '0' to exit: "))
if (y!=0) {
isosE[[i]] <- c(isosE[[i]], y)
} else {break}
}
rm(y)
}
exons <- integer()
repeat {
xn <- as.integer(readline(prompt="Enter EXON ending position or '0' to exit: "))
if (xn != 0) {
exons <- c(exons, xn)
} else {break}
}
isoforms <- as.integer(isoforms)
isosS
isosS <- rep(list(integer()),isoforms)
isosE <- rep(list(integer()),isoforms)
isosS[[1]] <- 1L
isosE[[1]] <- totL
# Isoform start and stop
for (i in 2:length(isosS)) {
z <- 1L
y <- 1L
print(paste("Isoform ", i, ": ......."))
print("START:")
repeat {
z <- as.integer(readline(prompt="Enter START position of isoform or '0' to exit: "))
if (z!=0) {
isosS[[i]] <- c(isosS[[i]], z)
#print(isosS)
} else {break}
}
rm(z)
print("END:")
repeat {
y <- as.integer(readline(prompt="Enter END position of isoform or '0' to exit: "))
if (y!=0) {
isosE[[i]] <- c(isosE[[i]], y)
} else {break}
}
rm(y)
}
## Output ####
# Exclusion regions:
ex <- integer()
exL <- integer()
ex <- 1L
exL <- CDSStart
ex <- c(ex, CDSEnd)
exL <- c(exL, totL-CDSEnd)
for (i in 2:length(isosS)) {
isoS <- isosS[[i]]
print(isoS)
isoE <- isosE[[i]]
print(isoE)
ord <- order(isoS)
isoS <- isoS[ord]
print(isoS)
isoE <- isoE[ord]
print(isoE)
if (length(isoS)==1) {
ex <- c(ex, 1L, isoE)
exL <- c(exL, isoS, totL-isoE)
} else {
for (j in 1:length(isoS)) {
if (isoS[j]==min(isoS)) { # first splice
ex <- c(ex, 1L)
exL <- c(exL, isoS[j])
} else if (isoS[j] == max(isoS)){ # last splice
ex <- c(ex, isoE[j])
exL <- c(exL, totL - isoE[j])
} else { # middle splices
if (isoE[j] + 1 == isoS[j+1]) { # splices are adjacent
if (isoS[j+1] == max(isoS)){ # adjacent splice is last
ex <- c(ex, isoE[j+1])
exL <- c(exL, totL - isoE[j+1])
} else { # adjacent splice is not last
ex <- c(ex, isoE[j+1])
exL <- c(exL, isoS[j+2] - isoE[j+1])
}
} else { # splices are note adjacent and are the middle splices
ex <- c(ex, isoE[j])
exL <- c(exL, isoS[j+1] - isoE[j])
}
} # IfElse END
} # vector loop for single isoform END
}
}
# Integrate exclusion regions:
exF <- integer()
exFL <- integer()
olap <- as.integer(names(table(ex)[table(ex)>1]))
for (i in ex) {
if (i %in% olap) {
a <- ex [ex %in% i]
aL <- exL [ex %in% i]
a1L <- max(aL)
a1 <- a[1]
} else {
a1 <- i
a1L <- exL[ex==a1]
}
if (i < totL) {
exF <- c(exF, a1)
exFL <- c(exFL, a1L)
}
}
keep <- !duplicated(exF)
exF <- exF[keep]
exFL <- exFL[keep]
# Print exclusion regions:
excl <- paste(exF, exFL, sep = ",")
excl <- paste(excl, collapse = " ")
cat("Exclusion regions are: \n\n", excl, "\n\n\n\n")
intervalsL <- integer()
intervalsR <- integer()
for (i in 1:length(exF)) {
if (exF[i]==max(exF)) {
break
}
intervalsL <- c(intervalsL, exFL[i] + exF[i])
intervalsR <- c(intervalsR, exF[i+1])
}
intervals <- as.matrix(cbind(intervalsL, intervalsR))
targets <- integer()
for (i in exons) {
#print(i)
for (j in 1:dim(intervals)[1]) {
#print(j)
if (i < intervals[,2] & i> intervals[,1]) {
targets <- c(targets, i)
}
}
}
# Output targets
targetO <- paste(targets, "2", sep = ",")
targetO <- paste(targetO, collapse = " ")
cat("Target regions are: \n\n", targetO, "\n\n\n\n")
## Make lists with averages ####
pbmc.sign.4.6 <- read.delim("pbmc.sign.4.6.txt")
## setwd, load libraries, & load data ####
setwd("/home/vassil/Documents/A.Martineau/GeneSignature")
## Make lists with averages ####
pbmc.sign.4.6 <- read.delim("pbmc.sign.4.6.txt")
pbmc.sign.5.6 <- read.delim("pbmc.sign.5.6.txt")
head(pbmc.sign.4.6)
table(pbmc.sign.5.6$Gene.ID)
# Generalise
tab <- pbmc.sign.4.6
names(tab)
# remove P-values
tab <- tab[,!(colnames(tab) %in% "P.Value")]
names(tab)
"sex","GEOlink","papers","GEO")]
# remove P-values, dataset, species, treatmentTime, sex, GEOlink, papers, and GEO
tab <- tab[,
!(colnames(tab) %in%
c("P.Value","species","treatmentTime","sex","GEOlink","papers","GEO"))]
head(tab)
# remove P-values, dataset, species, treatmentTime, sex, GEOlink, papers, and GEO
tab <- tab[,
!(colnames(tab) %in% c("P.Value",
"species","treatmentTime","sex",
"GEOlink","papers","GEO","dataset",
"type.x", "cellName"))]
head(tab)
values(table(tab$Gene.ID))
# extract gene names
geneids <- names(table(tab$Gene.ID))
# extract appearances of each gene name
geneFC <- table(tab$Gene.ID)
geneFC
geneids
for (i in geneids) { print(geneFC[i])}
?matrix
# Make empty data frame with same # of columns and rows = genes (NAs)
averFC <- as.data.frame(matrix(data = NA, nrow = length(geneids),
ncol = length(names(tab))))
class(averFC)
head(averFC)
colnames(averFC) <- colnames(tab)
head(averFC)
# Make empty data frame with same # of columns and rows = genes (NAs)
averFC <- as.data.frame(matrix(data = NA, nrow = length(geneids),
ncol = length(names(tab))+1))
colnames(averFC) <- c(colnames(tab), "appearances")
head(averFC)
# Populate table with GENE.NAME and GENE.ID:
averFC$Gene.ID <- geneids
# Populate table with GENE.NAME and GENE.ID:
averFC$Gene.ID <- unique(tab$Gene.ID)
genenames <- unique(tab$Gene.Name)
head(averFC)
tab$Gene.Name
genenames <- unique(as.character(tab$Gene.Name))
tab$Gene.ID
averFC$Gene.Name <- unique(as.character(tab$Gene.Name))
head(averFC)
averFC[,2:3]
tab[2:3]
i
# subset table to a mini0-table (a) for each gene
a <- tab[tab$Gene.ID==i,]
a
mean(a$FC)
averFC$FC[averFC$Gene.ID==i] <- mean(a$FC)
averFC
averFC[averFC$Gene.ID==i, c("cellType","appearances")] <- c(a$cellType[1],
dim(a)[1])
averFC
averageFC <- function (tabl1, excols) {
# Outputs a table with average FC and the first of
# other values from input table
# Get table
tab <- tabl1
# remove P-values, dataset, species, treatmentTime, sex, GEOlink, papers, and GEO
tab <- tab[,
!(colnames(tab) %in% excols)]
# Sort table based on GENE.ID:
tab <- tab[order(tab$Gene.ID),]
# extract gene names
geneids <- names(table(tab$Gene.ID))
# extract appearances of each gene name
geneFC <- table(tab$Gene.ID)
# Make empty data frame with same # of columns and rows = genes (NAs)
averFC <- as.data.frame(matrix(data = NA, nrow = length(geneids),
ncol = length(names(tab))+1))
colnames(averFC) <- c(colnames(tab), "appearances")
# Populate table with GENE.NAME and GENE.ID:
averFC$Gene.ID <- unique(tab$Gene.ID)
averFC$Gene.Name <- unique(as.character(tab$Gene.Name))
# loop over every single gene
for (i in geneids){
print (i)
# subset table to a mini0-table (a) for each gene
a <- tab[tab$Gene.ID==i,]
# Take average FC and populate table
averFC$FC[averFC$Gene.ID==i] <- mean(a$FC)
# take first entry from rest of input
averFC[averFC$Gene.ID==i, c("cellType","appearances")] <- c(a$cellType[1],
dim(a)[1])
}
return(averFC)
}
colnames(pbmc.sign.4.6)
head(pbmc.sign.4.6[,1:8])
head(averFC)
# define columns to be excluded:
excols <- c("dataset","P.Value","species","cellType",
"treatmentTime","cellName","sex","GEOlink","papers",
"GEO")
# get average tables
pbmc4out6 <- averageFC(tabl1 = pbmc.sign.4.6, excols = excols)
averageFC <- function (tabl1, excols) {
# Outputs a table with average FC and the first of
# other values from input table
# Get table
tab <- tabl1
# remove P-values, dataset, species, treatmentTime, sex, GEOlink, papers, and GEO
tab <- tab[,
!(colnames(tab) %in% excols)]
# Sort table based on GENE.ID:
tab <- tab[order(tab$Gene.ID),]
# extract gene names
geneids <- names(table(tab$Gene.ID))
# extract appearances of each gene name
geneFC <- table(tab$Gene.ID)
# Make empty data frame with same # of columns and rows = genes (NAs)
averFC <- as.data.frame(matrix(data = NA, nrow = length(geneids),
ncol = length(names(tab))+1))
colnames(averFC) <- c(colnames(tab), "appearances")
# Populate table with GENE.NAME and GENE.ID:
averFC$Gene.ID <- unique(tab$Gene.ID)
averFC$Gene.Name <- unique(as.character(tab$Gene.Name))
# loop over every single gene
for (i in geneids){
print (i)
# subset table to a mini0-table (a) for each gene
a <- tab[tab$Gene.ID==i,]
# Take average FC and populate table
averFC$FC[averFC$Gene.ID==i] <- mean(a$FC)
# take first entry from rest of input
averFC[averFC$Gene.ID==i, c("type.x","appearances")] <- c(a$cellType[1],
dim(a)[1])
}
return(averFC)
}
# get average tables
pbmc4out6 <- averageFC(tabl1 = pbmc.sign.4.6, excols = excols)
pbmc4out6
tab
rm(list=c("i","tab","averFC"))
# get average tables
pbmc4out6 <- averageFC(tabl1 = pbmc.sign.4.6, excols = excols)
tab
averageFC <- function (tab, excols) {
# Outputs a table with average FC and the first of
# other values from input table
# remove P-values, dataset, species, treatmentTime, sex, GEOlink, papers, and GEO
tab <- tab[,
!(colnames(tab) %in% excols)]
# Sort table based on GENE.ID:
tab <- tab[order(tab$Gene.ID),]
# extract gene names
geneids <- names(table(tab$Gene.ID))
# extract appearances of each gene name
geneFC <- table(tab$Gene.ID)
# Make empty data frame with same # of columns and rows = genes (NAs)
averFC <- as.data.frame(matrix(data = NA, nrow = length(geneids),
ncol = length(names(tab))+1))
colnames(averFC) <- c(colnames(tab), "appearances")
# Populate table with GENE.NAME and GENE.ID:
averFC$Gene.ID <- unique(tab$Gene.ID)
averFC$Gene.Name <- unique(as.character(tab$Gene.Name))
# loop over every single gene
for (i in geneids){
print (i)
# subset table to a mini0-table (a) for each gene
a <- tab[tab$Gene.ID==i,]
# Take average FC and populate table
averFC$FC[averFC$Gene.ID==i] <- mean(a$FC)
# take first entry from rest of input
averFC[averFC$Gene.ID==i, c("type.x","appearances")] <- c(a$cellType[1],
dim(a)[1])
}
return(averFC)
}
# get average tables
pbmc4out6 <- averageFC(tab = pbmc.sign.4.6, excols = excols)
excols
head(tab)
head(pbmc.sign.4.6)
excols
averageFC <- function (tab, excols) {
# Outputs a table with average FC and the first of
# other values from input table
# remove P-values, dataset, species, treatmentTime, sex, GEOlink, papers, and GEO
tab <- tab[,
!(colnames(tab) %in% excols)]
# Sort table based on GENE.ID:
tab <- tab[order(tab$Gene.ID),]
# extract gene names
geneids <- names(table(tab$Gene.ID))
# extract appearances of each gene name
geneFC <- table(tab$Gene.ID)
# Make empty data frame with same # of columns and rows = genes (NAs)
averFC <- as.data.frame(matrix(data = NA, nrow = length(geneids),
ncol = length(names(tab))+1))
colnames(averFC) <- c(colnames(tab), "appearances")
# Populate table with GENE.NAME and GENE.ID:
averFC$Gene.ID <- unique(tab$Gene.ID)
averFC$Gene.Name <- unique(as.character(tab$Gene.Name))
# loop over every single gene
for (i in geneids){
print (i)
# subset table to a mini0-table (a) for each gene
a <- tab[tab$Gene.ID==i,]
# Take average FC and populate table
averFC$FC[averFC$Gene.ID==i] <- mean(a$FC)
# take first entry from rest of input
averFC[averFC$Gene.ID==i, "appearances"] <- dim(a)[1]
}
return(averFC)
}
excols
excols <- c(excols, "type.x")
excols
# get average tables
pbmc4out6 <- averageFC(tab = pbmc.sign.4.6, excols = excols)
tab
head(pbmc4out6)
pbmc4out6
pbmc.sign.5.6 <- averageFC(tab = pbmc.sign.5.6, excols = excols)
pbmc.sign.5.6
pbmc5out6 <- pbmc.sign.5.6
epith.sig <- read.delim("epith.sig.txt")
epith <- averageFC(tab = epith.sig, excols = excols)
epith.sig
epith.sig[1:4]
epith.sig[,1:4]
lung <- read.delim("lung.txt")
lung.sig <- averageFC(tab = lung, excols = excols)
averageFC <- function (tab, excols) {
# Outputs a table with average FC and the first of
# other values from input table
# remove P-values, dataset, species, treatmentTime, sex, GEOlink, papers, and GEO
tab <- tab[,
!(colnames(tab) %in% excols)]
# Sort table based on GENE.ID:
tab <- tab[order(tab$Gene.ID),]
# extract gene names
geneids <- names(table(tab$Gene.ID))
# extract appearances of each gene name
geneFC <- table(tab$Gene.ID)
# Make empty data frame with same # of columns and rows = genes (NAs)
averFC <- as.data.frame(matrix(data = NA, nrow = length(geneids),
ncol = length(names(tab))+1))
colnames(averFC) <- c(colnames(tab), "appearances")
# Populate table with GENE.NAME and GENE.ID:
averFC$Gene.ID <- unique(tab$Gene.ID)
# loop over every single gene
for (i in geneids){
print (i)
# subset table to a mini0-table (a) for each gene
a <- tab[tab$Gene.ID==i,]
# Take average FC and populate table
averFC$FC[averFC$Gene.ID==i] <- mean(a$FC)
# take first entry from rest of input
averFC[averFC$Gene.ID==i, c("Gene.Name","appearances")] <- c(
a$Gene.Name[1], dim(a)[1])
}
return(averFC)
}
lung.sig <- averageFC(tab = lung, excols = excols)
lung
lung.sig
averageFC <- function (tab, excols) {
# Outputs a table with average FC and the first of
# other values from input table
# remove P-values, dataset, species, treatmentTime, sex, GEOlink, papers, and GEO
tab <- tab[,
!(colnames(tab) %in% excols)]
# Sort table based on GENE.ID:
tab <- tab[order(tab$Gene.ID),]
# extract gene names
geneids <- names(table(tab$Gene.ID))
# extract appearances of each gene name
geneFC <- table(tab$Gene.ID)
# Make empty data frame with same # of columns and rows = genes (NAs)
averFC <- as.data.frame(matrix(data = NA, nrow = length(geneids),
ncol = length(names(tab))+1))
colnames(averFC) <- c(colnames(tab), "appearances")
# Populate table with GENE.NAME and GENE.ID:
averFC$Gene.ID <- unique(tab$Gene.ID)
# loop over every single gene
for (i in geneids){
print (i)
# subset table to a mini0-table (a) for each gene
a <- tab[tab$Gene.ID==i,]
# Take average FC and populate table
averFC$FC[averFC$Gene.ID==i] <- mean(a$FC)
# take first entry from rest of input
averFC[averFC$Gene.ID==i, c("Gene.Name","appearances")] <- c(
as.character(a$Gene.Name[1]), dim(a)[1])
}
return(averFC)
}
lung.sig <- averageFC(tab = lung, excols = excols)
lung.sig
epith <- averageFC(tab = epith.sig, excols = excols)
epith
?order
# sort tables based on FC:
pbmc4out6 <- pbmc4out6[orde(pbmc4out6$FC,decreasing=T),]
# sort tables based on FC:
pbmc4out6 <- pbmc4out6[order(pbmc4out6$FC,decreasing=T),]
pbmc4out6
pbmc5out6 <- pbmc5out6[order(pbmc5out6$FC,decreasing=T),]
epith <- epith[order(epith$FC,decreasing=T),]
epith
lung <- lung.sig[order(lung.sig$FC,decreasing=T),]
lung
epith.lung <- lung.sig[order(lung.sig$FC,decreasing=T),]
epith.lung
epith
write.table(pbmc4out6, file="pbmc4out6.txt", sep="\t", row.names = F)
write.table(pbmc5out6, file="pbmc5out6.txt", sep="\t", row.names = F)
write.table(epith, file="epith.txt", sep="\t", row.names = F)
write.table(epith.lung, file="epith.lung.txt", sep="\t", row.names = F)
# average 2-FC and save
pbmc4out6.2 <- pbmc4out6[abs(pbmc4out6$FC)>=2,]
pbmc4out6.2
pbmc5out6.2 <- pbmc5out6[abs(pbmc5out6$FC)>=2,]
epith.2 <- epith[abs(epith$FC)>=2,]
epith.lung.2 <- lung.sig[abs(lung.sig$FC)>=2,]
epith.lung.2
epith.lung
write.table(pbmc4out6.2, file="pbmc4out6.2.txt", sep="\t", row.names = F)
write.table(pbmc5out6.2, file="pbmc5out6.2.txt", sep="\t", row.names = F)
write.table(epith.2, file="epith.2.txt", sep="\t", row.names = F)
write.table(epith.lung.2, file="epith.lung.2.txt", sep="\t", row.names = F)
